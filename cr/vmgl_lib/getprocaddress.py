# Copyright (c) 2001, Stanford University
# All rights reserved.
#
# See the file LICENSE.txt for information on redistributing this software.

import sys

sys.path.append("../glapi_parser")
import apiutil

apiutil.CopyrightC()

keys = apiutil.GetAllFunctions("../glapi_parser/APIspec.txt")
glx = apiutil.parse_glx("../glapi_parser/GLX_API_spec.txt")

def each_gl():
    for func_name in keys:
        if "Chromium" == apiutil.Category(func_name):
            continue
        if func_name == "BoundsInfoCR":
            continue
        if "GL_chromium" == apiutil.Category(func_name):
            pass #continue
        yield func_name

def each_glx():
    return iter(glx.records.keys())

def each_cr_glue():
    for func_name in keys:
        if (func_name == "Writeback" or
            func_name == "BoundsInfoCR"):
            continue
        if apiutil.Category(func_name) == "Chromium":
            yield func_name

NUM_FUNCS = len(list(each_gl())) + len(list(each_glx())) + len(list(each_cr_glue()))

print """
/* DO NOT EDIT - THIS FILE GENERATED BY THE getprocaddress.py SCRIPT */
#include "chromium.h"
#include "cr_string.h"
#include "cr_version.h"
#include "stub.h"
#include "getprocaddress.h"


struct name_address {{
  const char *name;
  CR_PROC address;
}};

#define NUM_FUNCS {NUM_FUNCS}

static struct name_address functions[NUM_FUNCS];

void initProcAddressTable(void)
{{
""".format(**locals())
i = 0
def prnt_fill_entry(i, name, address):
    print '\tfunctions[{i}] = (struct name_address) {{ .name = "{name}", .address = (CR_PROC) {address} }};'.format(**locals())
for func_name in each_gl():
    wrap = apiutil.GetCategoryWrapper(func_name)
    name = "gl" + func_name
    address = "gl" + func_name
    if wrap:
        print '#ifdef CR_%s' % wrap
    prnt_fill_entry(i, name, address)
    if wrap:
        print '#endif'
    i += 1
for func_name in each_glx():
    name = "glX" + func_name
    address = None
    if 'wrapped' in glx.props(func_name):
        # glX* is defined with a wrapper in glx.c
        address = "glX{func_name}".format(**locals())
    else:
        address = "stub.wsInterface.glX{func_name}".format(**locals())
    prnt_fill_entry(i, name, address)
    i += 1

print "\t/* Chromium binding/glue functions */"

for func_name in each_cr_glue():
    name = "cr" + func_name
    prnt_fill_entry(i, name, name)
    i += 1


print """
}; // initProcAddressTable

CR_PROC CR_APIENTRY crGetProcAddress( const char *name )
{
    int i;
    stubInit(); /*this can cause problems with threaded apps */

    for (i = 0; i < NUM_FUNCS; i++) {
        if (functions[i].name && crStrcmp(name, functions[i].name) == 0) {
            return functions[i].address;
        }
    }

    return NULL;
}

"""
